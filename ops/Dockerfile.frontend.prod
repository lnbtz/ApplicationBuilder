##############################
# Frontend Production Image  #
##############################
# NOTE: Build from the repository root so the frontend directory is in context:
#   docker build -f ops/Dockerfile.frontend.prod -t app-frontend:prod .
# If you really must build from another context, pass FRONTEND_DIR relative to that context.

# ---- Build stage ----
FROM node:20 AS build

ARG FRONTEND_DIR=frontend
WORKDIR /app

# Only copy package manifests first to leverage Docker layer caching for dependencies
COPY ${FRONTEND_DIR}/package*.json ./
# Need devDependencies (Vite, TypeScript, npm-run-all/run-p) for build step
RUN npm ci

# Copy the rest of the frontend source
COPY ${FRONTEND_DIR}/ .

# Build static assets with production optimizations
RUN NODE_ENV=production npm run build

# ---- Run stage (serve static) ----
FROM nginx:1.27-alpine
ENV NODE_ENV=production
LABEL org.opencontainers.image.source="https://github.com/lnbtz/ApplicationBuilder" \
	org.opencontainers.image.description="Production frontend (static)"

# Minimal, locked-down nginx config
COPY ops/nginx.conf /etc/nginx/conf.d/default.conf

# Copy only built artifacts
COPY --from=build /app/dist /usr/share/nginx/html

# Ensure files are readable (nginx runs as nginx user in alpine image)
RUN chmod -R a+r /usr/share/nginx/html

EXPOSE 80
CMD ["nginx","-g","daemon off;"]
