Betriebswirtschaft I
Excel, ERP, DataScience Basics, Marktanalyse

Logik und Berechenbarkeit
Logik und Berechenbarkeit. NP-Hard, Halteproblem, Aussagenlogik, Prädikaten Logik, Turing Maschine

Automatentheorie und Formale Sprachen
Projekte: Grammatiken, Automaten, Formale Sprachen
Konzepte: Reguläre Ausdrücke, Kontextfreie Sprachen, Compiler-Grundlagen, formale Beweise

Rechnerstrukturen und Maschinennahes Programmieren
Tools/Sprachen: Assembler, C, evtl. ARM-Simulator, gdb.
Projekte: kleines Assembler-Programm, direkte Speicher-/Register-Manipulation.
Konzepte: Von-Neumann-Architektur, Befehlssatz, Speicherhierarchien, Bitmanipulation.

Graphentheorie
Tools: Java
Projekte: Implementationen von Graph-Algorithmen (Kürzeste Wege, Matching).
Konzepte: Bäume, Flüsse, NP-harte Probleme, Planarität.

Algorithmen und Datenstrukturen
Tools/Sprachen: Java
Projekte: Implementationen (Sortierverfahren, Hashing, Bäume, Heaps, Komprimierung).
Konzepte: Big-O-Notation, Laufzeitanalyse, Speicherbedarf, generische Implementierungen.

Software Engineering I
Tools: UML-Tools, Git, Java (Gradle) für Umsetzung.
Projekte: Requirements Engineering, kleine Gruppenprojekte, UML-Diagramme.
Konzepte: Agile Methoden, Wasserfall vs. Scrum, Design Patterns (GoF).

Betriebssysteme
Tools: Linux, Shell Scripting, Java
Projekte: Scheduling-Algorithmen simulieren, Prozesskommunikation, Arbeitsspeicher Nachbauen, Threads.
Konzepte: Prozesse, Threads, Speicherverwaltung, Dateisysteme.

Intelligente Systeme
Tools: Java
Projekte: connect4 AI, genetische Algorithmen
Konzepte: Heuristiken, Wissensrepräsentation, AI Basics.

Software Engineering II
Tools: Java
Projekte: mittleres Teamprojekt mit Requirements, Implementierung, Test, Kalendar Applikation gebaut in Spring Boot, Datenbankanbindung, Authentifizierung, User Rollen Managemen (Admin, User, etc.).
Konzepte: Software-Lifecycle, Projektmanagement, Architekturpatterns (MVC, Layered).

Rechnernetze
Tools: Wireshark, Cisco Packet Tracer, Linux Networking Tools (netcat, iptables).
Projekte: Chat Protokoll mit 15 Leuten erstellt und in kleingruppen gemeinsamen Standard impelmentiert in Java um am ende übers Netzwerk zu chatten. Routing Tables verwalten.
Konzepte: OSI-Modell, TCP/IP, Routing, HTTP/FTP/SMTP.

Projekt: Machine Learning
Tools: Python (NumPy, PyTorchm Jupyter Notebooks, tensorflow).
Projekte: Breakout Spiel mit Convolutional Neural Network gespielt, Q Learning
Konzepte: Supervised/Unsupervised Learning, Klassifikation, Regression, Overfitting.

Architektur von Informationssystemen
Tools: UML, Datenbanktools (ER-Modellierung), Java EE/Spring.
Projekte: Architektur-Design für Anwendungssysteme
Konzepte: Mehrschichtarchitektur, Integration, Enterprise Patterns, SOLID, Clean Code, Microservices

Verteilte Systeme
Tools: Java, RPC
Projekte: Multiplayer Spiel, RPC, Server und Client Stub, Marshalling, DNS, Nameserver alles selbst implementiert in Java
Konzepte: Konsistenz, Replikation, Nebenläufigkeit, CAP-Theorem.

IT-Sicherheit
Tools: Wireshark, Java
Projekte: Kryptographie Algorithmen impelmentiert und damit sicheren Datenaustausch implementiert, Web Scraper implementiert in Rust
Konzepte: Kryptographie, Zugriffskontrolle, Sicherheitsprotokolle, Kerberos, SSH, TLS

Security in Distributed Systems 
Tools: Linux Shell
Projekte: Zertifikat Chain erstellt

Certified Tester
(ISTQB) → Softwaretest-Designtechniken, Tools: JUnit
Welche Konzepte gibt es noch wir haben sehr viel Theorie zum Testen behandelt und mussten viel manuell durchrechnen

Bachelorarbeit
Thema: Entwicklung eines Werkzeugs zur Reduzierung des Energieverbrauchs von Websites durch statische Code-Analyse.
Tools/Sprachen: Rust (statische Code-Analyse), evtl. AST-Parser, CLI-Tooling.
Projektergebnis: Tool zur Bewertung und Optimierung von Webcode (Green IT).
Konzepte: Energieoptimierung, statische Analyse, Nachhaltigkeit in der IT. Analyse von html, css, JavaScript.